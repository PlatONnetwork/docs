"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1468],{5788:(e,t,l)=>{l.d(t,{Iu:()=>c,yg:()=>y});var n=l(1504);function a(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function i(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){a(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function o(e,t){if(null==e)return{};var l,n,a=function(e,t){if(null==e)return{};var l,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)l=r[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)l=r[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var p=n.createContext({}),d=function(e){var t=n.useContext(p),l=t;return e&&(l="function"==typeof e?e(t):i(i({},t),e)),l},c=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},g="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var l=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=d(l),u=a,y=g["".concat(p,".").concat(u)]||g[u]||s[u]||r;return l?n.createElement(y,i(i({ref:t},c),{},{components:l})):n.createElement(y,i({ref:t},c))}));function y(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=l.length,i=new Array(r);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[g]="string"==typeof e?e:a,i[1]=o;for(var d=2;d<r;d++)i[d]=l[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,l)}u.displayName="MDXCreateElement"},9940:(e,t,l)=>{l.r(t),l.d(t,{contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=l(5072),a=(l(1504),l(5788));const r={id:"PlatON_wallet_plugin_sdk",title:"PlatON-Wallet-Plugin-SDK - Access Manual",sidebar_label:"PlatON wallet plugin SDK"},i="INTEGRATE PlatON Wallet Plugin SDK",o={unversionedId:"PlatON_wallet_plugin_sdk",id:"PlatON_wallet_plugin_sdk",isDocsHomePage:!1,title:"PlatON-Wallet-Plugin-SDK - Access Manual",description:"Install PlatON Wallet Plugin SDK",source:"@site/../docs/PlatON Wallet Plugin SDK.md",sourceDirName:".",slug:"/PlatON_wallet_plugin_sdk",permalink:"/docs/PlatON_wallet_plugin_sdk",editUrl:"https://github.com/PlatONnetwork/docs/tree/master/docs/PlatON Wallet Plugin SDK.md",version:"current",frontMatter:{id:"PlatON_wallet_plugin_sdk",title:"PlatON-Wallet-Plugin-SDK - Access Manual",sidebar_label:"PlatON wallet plugin SDK"},sidebar:"docs",previous:{title:"PlatON wallet plugin",permalink:"/docs/PlatON_wallet_plugin"},next:{title:"PlaTrust Wallet",permalink:"/docs/PlaTrust_Wallet"}},p=[{value:"Install PlatON Wallet Plugin SDK",id:"install-platon-wallet-plugin-sdk",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Set up the SDK",id:"set-up-the-sdk",children:[{value:"Initialize and use PlatON-Wallet",id:"initialize-and-use-platon-wallet",children:[]},{value:"Switch To Particle Wallet",id:"switch-to-particle-wallet",children:[]},{value:"Switch To WalletConnect v2",id:"switch-to-walletconnect-v2",children:[]}]},{value:"Disconnect or Exit",id:"disconnect-or-exit",children:[]},{value:"Example usage",id:"example-usage",children:[]},{value:"Token Contract",id:"token-contract",children:[{value:"PlatON Testnet",id:"platon-testnet",children:[]},{value:"PlatON Mainnet",id:"platon-mainnet",children:[]}]}],d={toc:p},c="wrapper";function g(e){let{components:t,...l}=e;return(0,a.yg)(c,(0,n.c)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"integrate-platon-wallet-plugin-sdk"},"INTEGRATE PlatON Wallet Plugin SDK"),(0,a.yg)("h2",{id:"install-platon-wallet-plugin-sdk"},"Install PlatON Wallet Plugin SDK"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Integrate our SDK to your dApp/Wallet/swap UI.")),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("p",null,"We recommend installing the SDK via npm\u3001yarn or pnpm."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm install '@platonnetwork/platon-wallet-sdk'\n")),(0,a.yg)("p",null,"or"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"yarn add '@platonnetwork/platon-wallet-sdk'\n")),(0,a.yg)("p",null,"or"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"pnpm add '@platonnetwork/platon-wallet-sdk'\n")),(0,a.yg)("h2",{id:"set-up-the-sdk"},"Set up the SDK"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"After you have installed the SDK, you first need to set it up.")),(0,a.yg)("p",null,"To get started, you have to instantiate and configure the Platon-Wallet SDK:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"import PlatOWallet from '@platonnetwork/platon-wallet-sdk';\n\n// Definition PlatONWallet SDK\nconst walletSDK = new PlatONWallet(config);\n")),(0,a.yg)("p",null,"The optional config parameter can be used to pass custom configuration to the SDK:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"type ConfigUpdate = {\n    env: 'PROD', // 'TEST' or 'PROD'\n    // This parameter is optional. 'light' or 'dark', default to 'light'\n    theme: 'light'  \n};\n")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"env")," defines which environment should be access, and can be selected as ",(0,a.yg)("inlineCode",{parentName:"p"},"TEST")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"PROD"),". This requires that\nthe corresponding environment be determined at initialization time."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TEST")," Corresponding test environment, which corresponds to PlatON's development network;"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"PROD")," Corresponds to the production environment, which corresponds to the main network of PlatON;")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Note: After the user connects the wallet and switches the wallet each time, the parameter needs to be set in the following ways:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"walletSDK.setWalletOption({\n  walletType: '<Wallet plugin identification>',\n  walletProvider: <EIP1193 standard Provider>\n})\n")),(0,a.yg)("h3",{id:"initialize-and-use-platon-wallet"},"Initialize and use PlatON-Wallet"),(0,a.yg)("p",null,"Once the PlatON-Wallet definition is complete, the 'init()' function needs to be called to complete the initialization:"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Example is the MetaMask wallet plug-in usage.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"// Initialize PlatONWallet SDK\nwalletSDK.init({\n  walletType: 'METAMASK',           // eg\uff1a'METAMASK', 'PARTICLE', 'WALLETCONNECT'\n  walletProvider: window.ethereum   // `window.ethereum` \u4e3a MetaMask is eip1193 ethereum provider\n})\n")),(0,a.yg)("p",null,"walletType value\uff1a"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"METAMASK"),"\uff1aMetaMask wallet plugin\uff1b"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"PARTICLE"),"\uff1aParticle wallet\uff1b"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"WALLETCONNECT"),"\uff1aWalletConnect V2\uff1b")),(0,a.yg)("p",null,"After initialization, need to call the 'setWalletOption()' function to set the wallet type of the current connection:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"// Setup wallet plugin\nwalletSDK.setWalletOption({\n  walletType: 'METAMASK',\n  walletProvider: window.ethereum,\n})\n")),(0,a.yg)("p",null,"After setting the wallet type, call 'show()' to display the PlatON-Wallet page:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"// Show wallet\nwalletSDK.show();\n")),(0,a.yg)("h3",{id:"switch-to-particle-wallet"},"Switch To Particle Wallet"),(0,a.yg)("p",null,"Method of obtaining EIP1193 standard provider in Particle:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"// particle example, @particle-network/connect-react-ui, @wagmi/core and @particle-network/connect \n// packages expose the provider in a different way, refer their docs for details\nconst pn = new ParticleNetwork({\n  projectId: 'your project id',\n  clientKey: 'your client key',\n  appId: 'your app id',\n  wallet: {\n    displayWalletEntry: false,\n  },\n}) \n\n// import { ParticleNetwork } from '@particle-network/auth'\n// import { ParticleProvider } from '@particle-network/provider'\nconst particleProvider = new ParticleProvider(pn.auth) \n")),(0,a.yg)("p",null,"Setting wallet to Particle in PlatON-Wallet\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"walletSDK.setWalletOption({\n  walletType: 'PARTICLE',\n  walletProvider: particleProvider,\n})\n")),(0,a.yg)("h3",{id:"switch-to-walletconnect-v2"},"Switch To WalletConnect v2"),(0,a.yg)("p",null,"Method of obtaining EIP1193 standard provider in WalletConnect v2:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"// walletconnect example, @wagmi/core and @web3modal/ethereum packages expose the provider in a different way, refer their docs for details\nconst supportedRpcMap = await wallet.getSupportedChainsMap() // walletconnect required\n\nconst wcProvider = await EthereumProvider.init({\n  // import { EthereumProvider } from '@walletconnect/ethereum-provider'\n  projectId: 'your project id',\n  chains: [\n    ...Object.keys(supportedRpcMap).map((item) => +item),\n    // your own chains\n  ],\n  rpcMap: {\n    ...supportedRpcMap,\n    // your own rpc map\n  },\n  showQrModal: true,\n  qrModalOptions: {\n    themeVariables: {\n      '--wcm-z-index': '9999',\n    },\n  },\n})\n")),(0,a.yg)("p",null,"Setting wallet to WalletConnect v2 in PlatON-Wallet\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"walletSDK.setWalletOption({\n  walletType: 'WALLETCONNECT',\n  walletProvider: wcProvider,\n})\n")),(0,a.yg)("h2",{id:"disconnect-or-exit"},"Disconnect or Exit"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"walletSDK.setWalletOption({\n  walletType: '',\n  walletProvider: null,\n})\n")),(0,a.yg)("p",null,"or "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"walletSDK.destroy()\n")),(0,a.yg)("h2",{id:"example-usage"},"Example usage"),(0,a.yg)("p",null,"When the project is rendered for the client, use the following import methods:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import PlatOWallet from '@platonnetwork/platon-wallet-sdk';\n\n// Definition PlatONWallet SDK\nconst walletSDK = new PlatONWallet({\n    env: 'PROD', // 'TEST' or 'PROD'\n    theme: 'light'\n});\n\n// Initialization PlatONWallet SDK\nwalletSDK.init({\n    walletType: 'METAMASK', \n    walletProvider: window.ethereum\n});\n\n// Set wallet type\nwalletSDK.setWalletOption({\n  walletType: 'METAMASK',\n  walletProvider: window.ethereum\n})\n\n// Hide Platon-Wallet.\nwalletSDK.hide();\n\n// Show Platon-Wallet.\nwalletSDK.show();\n\n// Destroy Platon-Wallet\nwalletSDK.destroy();\n")),(0,a.yg)("p",null,"When the project is rendered for the server (e.g. using next.js, etc.), use the following import method:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-next.js"},"let walletSDK = null\n\nimport('@platonnetwork/platon-wallet-sdk').then(module => {\n\xa0 walletSDK = new module.default({ env: 'PROD' })\n})\n")),(0,a.yg)("h2",{id:"token-contract"},"Token Contract"),(0,a.yg)("h3",{id:"platon-testnet"},"PlatON Testnet"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"left"},"name"),(0,a.yg)("th",{parentName:"tr",align:"left"},"symbol"),(0,a.yg)("th",{parentName:"tr",align:"left"},"address"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Tether USD"),(0,a.yg)("td",{parentName:"tr",align:"left"},"USDT"),(0,a.yg)("td",{parentName:"tr",align:"left"},"0x1e6E4b48F6F57Aa7cefd8239e8515694D110386B")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"USD Coin"),(0,a.yg)("td",{parentName:"tr",align:"left"},"USDC"),(0,a.yg)("td",{parentName:"tr",align:"left"},"0x229b68722bF16CCc7186Dc8760b3D8C5980fe609")))),(0,a.yg)("h3",{id:"platon-mainnet"},"PlatON Mainnet"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"left"},"name"),(0,a.yg)("th",{parentName:"tr",align:"left"},"symbol"),(0,a.yg)("th",{parentName:"tr",align:"left"},"address"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Tether USD"),(0,a.yg)("td",{parentName:"tr",align:"left"},"USDT"),(0,a.yg)("td",{parentName:"tr",align:"left"},"0xeac734fb7581D8eB2CE4949B0896FC4E76769509")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"USD Coin"),(0,a.yg)("td",{parentName:"tr",align:"left"},"USDC"),(0,a.yg)("td",{parentName:"tr",align:"left"},"0xdA396A3C7FC762643f658B47228CD51De6cE936d")))))}g.isMDXComponent=!0}}]);